{"version":3,"sources":["pages/Home/Home.js","pages/AboutAuthor/AboutAuthor.js","pages/AboutPublishedBooks/AboutPublishedBooks.js","pages/Contact/Contact.js","pages/SidebarMenu/Sidebarmenu.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","className","rel","href","target","AboutAuthor","AboutPublishedBooks","Contact","SidebarMenu","map","item","i","key","App","useState","displayStyle","setDisplayStyle","onMenuClick","event","console","log","currentTarget","dataset","id","useEffect","onClick","bind","data-id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kWAyBeA,G,YAtBF,SAACC,GACV,OACI,yBAAKC,UAAU,QACX,wSAEsC,uBAAGC,IAAI,sBAAsBC,KAAK,wCAAwCC,OAAO,UAAjF,oBAFtC,iMAKA,8QAKA,gdCLGC,G,MARK,SAACL,GACjB,OACI,yBAAKC,UAAY,UACb,+CCKGK,G,MARa,WACxB,OACI,yBAAKL,UAAU,aACX,wDCKGM,G,MARC,WACZ,OACI,yBAAKN,UAAU,WACX,kDCUGO,G,MAbK,WAEhB,OACI,6BAFmB,CAAC,aAAc,aAAc,eAIvBC,KAAI,SAACC,EAAMC,GACxB,OAAQ,yBAAKC,IAAKD,EAAGV,UAAU,aAAY,8BAAOS,UCwEvDG,EAxEH,WAAO,IAAD,EAEwBC,mBAAS,CAC/C,aAAgB,KAHF,mBAETC,EAFS,KAEKC,EAFL,KAMVC,EAAc,SAACC,GACnBC,QAAQC,IAAI,aAAcF,EAAMG,cAAcC,QAAQC,IAEnB,cAAnCL,EAAMG,cAAcC,QAAQC,GAC5BP,EAAgB,CACd,aAAgB,cAGkB,gBAAnCE,EAAMG,cAAcC,QAAQC,GAC7BP,EAAgB,CACd,aAAgB,gBAGkB,mBAAnCE,EAAMG,cAAcC,QAAQC,GAC7BP,EAAgB,CACd,aAAgB,mBAEhBA,EAAgB,CAChB,aAAgB,kBAYpB,OANAQ,qBAAU,WACRR,EAAgB,CACd,aAAgB,gBAEjB,IAGD,yBAAKf,UAAU,OACb,yBAAKA,UAAU,QACb,iEAEA,yBAAKA,UAAU,aACb,4BACE,wBAAIwB,QAAWR,EAAYS,U,GAAYC,UAAQ,aAAY,uBAAGxB,KAAK,SAAR,SAC3D,wBAAIsB,QAAWR,EAAYS,U,GAAYC,UAAQ,eAAc,uBAAGxB,KAAK,WAAR,iBAC7D,wBAAIsB,QAAWR,EAAYS,U,GAAYC,UAAQ,kBAAiB,uBAAGxB,KAAK,cAAR,0BAChE,wBAAIsB,QAAWR,EAAYS,U,GAAYC,UAAQ,gBAAe,uBAAGxB,KAAK,YAAR,cAIlE,yBAAKF,UAAU,WACb,yBAAKA,UAAU,gBACkB,cAA9Bc,EAAaA,aACZ,kBAAC,EAAD,MAC8B,gBAA9BA,EAAaA,aACb,kBAAC,EAAD,MAC8B,mBAA9BA,EAAaA,aACb,kBAAC,EAAD,MAC8B,iBAA9BA,EAAaA,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,OAGJ,yBAAKd,UAAU,gBACb,kBAAC,EAAD,WC7DQ2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2aba08b9.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Home.css';\r\n\r\nconst Home = (props) => {\r\n    return (\r\n        <div className=\"home\">\r\n            <p>Agricultural Price Prediction / Agricultural Price Forecasting – website is publishing the predicted price data or future price\r\n                data (agricultural price forecasting) of Agricultural commodities for state of Karnataka in India.\r\n                We are using the data provided by <a rel=\"noopener noreferrer\" href=\"http://agmarknet.nic.in/agmarknetweb/\" target=\"_blank\">AGMARKNET.NIC.IN</a> as a reference source to predict the future prices of Agricultural commodities.\r\n                The contents published here are based on methodologies developed by Dr Narasimhan Madihally Krishna Iyengar.\r\n            </p>\r\n            <p>As a service to the nation, we are publishing the data free of cost for the users.\r\n                We expect the same from the users of these data not to generate revenue out of this.\r\n                In other words, users are not supposed to sell these data to the needy.\r\n            </p>\r\n\r\n            <p>Currently, we are publishing the predicted prices or forecast prices around 2 months in advance\r\n                ( prices of 2 months in future ) for 13 commodities namely – Paddy(Dhan), Jowar(Sorgham), Maize, Ragi, Bajra, Arhar(Tur),\r\n                Blackgram(Urad Beans), Greengram(Moong), Groundnut, Sunflower, Copra, Onion, Potato for State of Karnataka.\r\n                The current work can be extended to many other commodities and even specific to particular markets.\r\n            </p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport './AboutAuthor.css';\r\n\r\nconst AboutAuthor = (props) => {\r\n    return (\r\n        <div className = 'author'>\r\n            <h1>About Author</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AboutAuthor;","import React from 'react';\r\nimport './AboutPublishedBooks.css';\r\n\r\nconst AboutPublishedBooks = () => {\r\n    return (\r\n        <div className='published'>\r\n            <h1>About Published Books</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AboutPublishedBooks;","import React from 'react';\r\nimport './Contact.css';\r\n\r\nconst Contact = () => {\r\n    return (\r\n        <div className='contact'>\r\n            <h1>Contact Details</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Contact;","import React from 'react';\r\nimport './SidebarMenu.css';\r\n\r\nconst SidebarMenu = () => {\r\n    let sidebar_menu_arr = ['Bajra 2019', 'Onion 2019', 'Potato 2019']\r\n    return (\r\n        <div>\r\n            {\r\n                sidebar_menu_arr.map((item, i) => {\r\n                    return (<div key={i} className=\"menu_item\"><span>{item}</span></div>)\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SidebarMenu;","import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\n\r\nimport Home from './pages/Home/Home';\r\nimport AboutAuthor from './pages/AboutAuthor/AboutAuthor';\r\nimport AboutPublishedBooks from './pages/AboutPublishedBooks/AboutPublishedBooks';\r\nimport Contact from './pages/Contact/Contact';\r\nimport SidebarMenu from './pages/SidebarMenu/Sidebarmenu';\r\n\r\nconst App = () => {  \r\n\r\n  const [displayStyle, setDisplayStyle] = useState({\r\n    'displayStyle': ''\r\n  });\r\n\r\n  const onMenuClick = (event) => {\r\n    console.log(\"menu click\", event.currentTarget.dataset.id);\r\n\r\n    event.currentTarget.dataset.id === 'home_menu' ?\r\n    setDisplayStyle({\r\n      'displayStyle': 'home_menu'\r\n    }) \r\n    :  \r\n    (event.currentTarget.dataset.id === 'author_menu' ? \r\n    setDisplayStyle({\r\n      'displayStyle': 'author_menu'\r\n    }) \r\n    :\r\n    (event.currentTarget.dataset.id === 'published_menu' ? \r\n    setDisplayStyle({\r\n      'displayStyle': 'published_menu'\r\n    })\r\n    : setDisplayStyle({\r\n      'displayStyle': 'contact_menu'\r\n    })\r\n    )    \r\n    )\r\n  }\r\n\r\n  useEffect(() => {\r\n    setDisplayStyle({\r\n      'displayStyle': 'home_menu'\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"main\">\r\n        <header>Agricultural Price Prediction</header>\r\n\r\n        <div className=\"main_main\">\r\n          <ul>\r\n            <li onClick = {onMenuClick.bind(this)} data-id=\"home_menu\"><a href=\"#home\">Home</a></li>\r\n            <li onClick = {onMenuClick.bind(this)} data-id=\"author_menu\"><a href=\"#author\">About Author</a></li>\r\n            <li onClick = {onMenuClick.bind(this)} data-id=\"published_menu\"><a href=\"#published\">About Published Books</a></li>\r\n            <li onClick = {onMenuClick.bind(this)} data-id=\"contact_menu\"><a href=\"#contact\">Contact</a></li>\r\n          </ul>\r\n        </div>\r\n\r\n        <div className=\"content\">\r\n          <div className=\"text_content\">\r\n            {displayStyle.displayStyle === 'home_menu' ?\r\n              <Home /> :\r\n              displayStyle.displayStyle === 'author_menu' ? \r\n              <AboutAuthor /> :\r\n              displayStyle.displayStyle === 'published_menu' ?\r\n              <AboutPublishedBooks /> :\r\n              displayStyle.displayStyle === 'contact_menu' ?\r\n              <Contact /> :\r\n              <Home />\r\n            }\r\n          </div>\r\n          <div className=\"sidebar_menu\">\r\n            <SidebarMenu />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );  \r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}